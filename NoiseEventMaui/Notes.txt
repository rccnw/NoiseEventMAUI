
home
47.5339, -122.3755



MAUI project
.NET 7 preview RC2

7.0.0-rc.2.6866 
10/20/2022
https://github.com/dotnet/maui/releases/




https://stackoverflow.com/questions/57633613/error-api-key-not-found-when-i-am-trying-to-add-google-map-to-xamarin
Your API keys can be found in your Google Cloud Platform Console
Here's the link : https://console.cloud.google.com/apis/credentials

You can check for the status of your "Maps SDK for Android" by searching for it in the GCP console's API Library : https://console.cloud.google.com/apis/library

Check this docs page: https://learn.microsoft.com/en-us/xamarin/android/platform/maps-and-location/maps/maps-api#-specify-the-required-permissions

Scroll down a bit to the large code block after "The following snippet is an example of the settings that must be added to AndroidManifest.XML:" and make sure to replace YOUR_API_KEY with your actual api key.

Copied from link (in case it goes away):


The following snippet is an example of the settings that must be added to AndroidManifest.XML:

<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android" 
          android:versionName="4.5" 
          package="com.xamarin.docs.android.mapsandlocationdemo2" 
          android:versionCode="6">
    <uses-sdk android:minSdkVersion="23" android:targetSdkVersion="28" />

    <!-- Google Maps for Android v2 requires OpenGL ES v2 -->
    <uses-feature android:glEsVersion="0x00020000" android:required="true" />

    <!-- Necessary for apps that target Android 9.0 or higher -->
    <uses-library android:name="org.apache.http.legacy" android:required="false" />


    <!-- Permission to receive remote notifications from Google Play Services -->
    <!-- Notice here that we have the package name of our application as a prefix on the permissions. -->
    <uses-permission android:name="<PACKAGE NAME>.permission.MAPS_RECEIVE" />
    <permission android:name="<PACKAGE NAME>.permission.MAPS_RECEIVE" android:protectionLevel="signature" />

    <!-- These are optional, but recommended. They will allow Maps to use the My Location provider. -->
    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />


    <application android:label="@string/app_name">
        <!-- Put your Google Maps V2 API Key here. -->
        <meta-data android:name="com.google.android.maps.v2.API_KEY" android:value="YOUR_API_KEY" />
        <meta-data android:name="com.google.android.gms.version" android:value="@integer/google_play_services_version" />
        <!-- Necessary for apps that target Android 9.0 or higher -->
        <uses-library android:name="org.apache.http.legacy" android:required="false" />
    </application>
</manifest>



android:label="@string/NoiseEvent"






    <ScrollView>
        <VerticalStackLayout
            Spacing="25"
            Padding="30,0"
            VerticalOptions="Center"> 

        </VerticalStackLayout>
    </ScrollView>






    https://vladislavantonyuk.azurewebsites.net/articles/Customize-map-pins-in-.NET-MAUI


    https://vladislavantonyuk.azurewebsites.net/?Page=1
    https://github.com/dotnet/maui-samples


    https://learn.microsoft.com/en-us/samples/dotnet/maui-samples/userinterface-views-map/

    https://github.com/dotnet/maui-samples/tree/main/7.0/UserInterface/Views/Map



Microsoft.Extensions.Logging.Debug
installed		7.0.0-rc.2.22472.3


    <Grid>
        <Map x:Name="map" />
    </Grid>




Versioning .net Core applications using Cake
https://gsferreira.com/archive/2018/06/versioning-net-core-applications-using-cake/

If you are moving to .net Core and you want to implement a versioning strategy in your application, now you have an awesome alternative to the good old fellow "AssemblyInfo".

The alternative is the Directory.Build.props file
If you place these file in the root folder that contains your source code, 
when MSBuild runs will add to every project the properties defined in the Directory.Build.props.



https://learn.microsoft.com/en-us/xamarin/android/platform/maps-and-location/maps/maps-application
When you use the maps application, the map will not be part of your application. 
Instead, your application will launch the maps application and load the map externally. 


Set up Android device for debugging

https://learn.microsoft.com/en-us/dotnet/maui/android/device/setup


Publish a .NET MAUI app for iOS
https://learn.microsoft.com/en-us/dotnet/maui/ios/deployment/overview

Publish a .NET MAUI app for Windows
https://learn.microsoft.com/en-us/dotnet/maui/windows/deployment/overview

Publish a .NET MAUI app for Android
https://learn.microsoft.com/en-us/dotnet/maui/android/deployment/overview



https://stackoverflow.com/questions/38327148/map-coordinates-c-sharp


capturing present position information from a GPS device linked to a computer through a serial port
https://www.c-sharpcorner.com/article/mapping-with-a-gps-and-C-Sharp/

https://csharp.hotexamples.com/examples/System/Coordinate/-/php-coordinate-class-examples.html

https://stackoverflow.com/questions/365826/calculate-distance-between-2-gps-coordinates?rq=1



Location type from MAUI Essentials
https://github.com/dotnet/maui/blob/18ed02b41a35edad98aef79ec677c42ebff52890/src/Essentials/src/Types/Location.shared.cs


public class Location
	{
	/// <include file="../../docs/Microsoft.Maui.Essentials/Location.xml" path="//Member[@MemberName='.ctor'][3]/Docs/*" />
		public Location(double latitude, double longitude)
		{
			Latitude = Math.Min(Math.Max(latitude, -90.0), 90.0);
			Longitude = Math.Min(Math.Max(longitude, -180.0), 180.0);
			Timestamp = DateTimeOffset.UtcNow;
		}

		/// <include file="../../docs/Microsoft.Maui.Essentials/Location.xml" path="//Member[@MemberName='.ctor'][4]/Docs/*" />
		public Location(double latitude, double longitude, DateTimeOffset timestamp)
		{
			Latitude = latitude;
			Longitude = longitude;
			Timestamp = timestamp;
		}

		public Location(Location point)
		{
			if (point == null)
				throw new ArgumentNullException(nameof(point));

			Latitude = point.Latitude;
			Longitude = point.Longitude;
			Timestamp = DateTime.UtcNow;
			Altitude = point.Altitude;
			Accuracy = point.Accuracy;
			VerticalAccuracy = point.VerticalAccuracy;
			ReducedAccuracy = point.ReducedAccuracy;
			Speed = point.Speed;
			Course = point.Course;
			IsFromMockProvider = point.IsFromMockProvider;
		}

        		public DateTimeOffset Timestamp { get; set; }

		/// <include file="../../docs/Microsoft.Maui.Essentials/Location.xml" path="//Member[@MemberName='Latitude']/Docs/*" />
		public double Latitude { get; set; }

		/// <include file="../../docs/Microsoft.Maui.Essentials/Location.xml" path="//Member[@MemberName='Longitude']/Docs/*" />
		public double Longitude { get; set; }
		public bool IsFromMockProvider { get; set; }


		CalculateDistance(latitudeStart, longitudeStart, locationEnd.Latitude, locationEnd.Longitude, units);


        more there.....




